<!-- Copyright (c) 2008-2009  Philippe Bourgau -->

<!-- This program is free software: you can redistribute it and/or modify -->
<!-- it under the terms of the GNU Affero General Public License as
 published by the Free Software Foundation, either version 3 of the
 License, or (at your option) any later version. -->

<!-- This program is distributed in the hope that it will be useful, but -->
<!-- WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU Affero General Public License for more details. -->

<!-- You should have received a copy of the GNU Affero General Public License -->
<!-- program.  If not, see <http://www.gnu.org/licenses/> -->


<% # ========================================================================
   # FilooFiloo.PlayerController Unit Test
   # ========================================================================
%>
<% content_for('final') do %>

<script>

Test.context("FilooFiloo.VersusController",{

  setup: function()  {
    FilooFiloo.loginController = FilooFiloo.createLoginController();
    this.versusController = FilooFiloo.createVersusController();

    this.player = null;
    this.waitTimer = null;
    this.playerTimer = null;

    var that = this;

    this.versusController.Player = {
      newRecord: function(values, datasource) {
        that.player = FilooFiloo.Player.newRecord(values, datasource);
	that.player.commitCalled = NO;
        that.player.commit = function() {
          that.player.commitCalled = YES;
        };
	that.player.refreshCalled = NO;
        that.player.refresh = function() {
          that.player.refreshCalled = YES;
        };
        return that.player;
      }
    };

    this.versusController.Timer = {
      schedule: function(params) {
        var result = {
          parameters: params,
	  invalidateCalled: NO,
          invalidate: function() {
	     this.invalidateCalled = YES;
	  }
        };
        if (!that.waitTimer) {
          that.waitTimer = result;
        }
        else {
          that.playerTimer = result;
        }
	return result;
      }
    };
    this.tickTimer = function(timer) {
      this.assertNotNull(timer);
      this.assertNotNull(timer.parameters);
      this.assertNotNull(timer.parameters.target);
      this.assertNotNull(timer.parameters.action);
      this.assertIdentical(YES, timer.parameters.repeats);

      timer.parameters.target[timer.parameters.action]();
    };
    this.tickWaitTimer = function() {
      this.tickTimer(this.waitTimer);
    };
    this.tickPlayerTimer = function() {
      this.tickTimer(this.playerTimer);
    };

    this.startAGame = function() {
      FilooFiloo.loginController.set('name', 'zinzin');
      this.versusController.set('currentMode', 'versus')

      this.player.set('opponentName', 'gyzmo');
      this.tickWaitTimer();
    };
  },

  "Entering versus mode should force a login and start waiting for an opponent": function() {

    this.versusController.set('currentMode', 'versus');
    YES.shouldEqual(FilooFiloo.loginController.get('loginPaneVisible'));

    FilooFiloo.loginController.set('name', 'zinzin');
    FilooFiloo.loginController.closeLoginPane();

    'Waiting for an opponent ...'.shouldEqual(this.versusController.get('whatIsPlayerDoing'));
    assertNotNull(this.player);
    YES.shouldEqual(this.player.commitCalled);
    NO.shouldEqual(this.player.refreshCalled);

    this.tickWaitTimer();
    YES.shouldEqual(this.player.refreshCalled);

    this.player.set('opponentName', 'gyzmo');
    this.tickWaitTimer();
    'Playing against gyzmo'.shouldEqual(this.versusController.get('whatIsPlayerDoing'));
    YES.shouldEqual(this.versusController.get('board').get('playing'));
  },

  "No login dialog should be shown when entering versus mode with a name": function() {
    FilooFiloo.loginController.set('name', 'zinzin');
    this.versusController.set('currentMode', 'versus')
    NO.shouldEqual(FilooFiloo.loginController.get('loginPaneVisible'));
  },
  "We should start waiting for an opponent even if a name was already set": function() {
    FilooFiloo.loginController.set('name', 'zinzin');
    this.versusController.set('currentMode', 'versus')
    'Waiting for an opponent ...'.shouldEqual(this.versusController.get('whatIsPlayerDoing'));
  },
  "We should only start waiting for an opponent in versus mode": function() {
    this.versusController.set('currentMode', 'high_scores')
    NO.shouldEqual(FilooFiloo.loginController.get('loginPaneVisible'));
    assertNotIdentical('Waiting for an opponent ...', this.versusController.get('whatIsPlayerDoing'));
  },
  "Once the game is started, the player should be commited regularly with a valid board": function() {
    this.startAGame();

    this.player.commitCalled = NO;
    this.tickPlayerTimer();
    assertNotNull(this.player.get('boardString'));
    YES.shouldEqual(this.player.commitCalled);    
  },

  "If a game stops, the player timer shouls be invalidated": function() {
    this.startAGame();

    this.versusController.get('board').abort();
    YES.shouldEqual(this.playerTimer.invalidateCalled);
  }

}) ;

// Cancel main() so app does not start
if (window.main && (appMain = main)) main = null ;

</script>

<% end %>
