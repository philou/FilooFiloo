<!-- Copyright (c) 2008-2009  Philippe Bourgau -->

<!-- This program is free software: you can redistribute it and/or modify -->
<!-- it under the terms of the MIT License. -->

<!-- This program is distributed in the hope that it will be useful, but -->
<!-- WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the MIT -->
<!-- License for more details. -->

<!-- You should have received a copy of the MIT License along with this -->
<!-- program.  If not, see <http://www.opensource.org/licenses/mit-license.php> -->


<% # ========================================================================
   # FilooFiloo.PlayerController Unit Test
   # ========================================================================
%>
<% content_for('final') do %>

<script>

Test.context("FilooFiloo.VersusController",{

  setup: function()  {
    this.versusController = FilooFiloo.createVersusController();

    that = this;

    this.player = null;
    this.versusController.Player = {
      newRecord: function(values, datasource) {
        that.player = FilooFiloo.Player.newRecord(values, datasource);
	that.player.commitCalled = NO;
        that.player.commit = function() {
          that.player.commitCalled = YES;
        };
	that.player.refreshCalled = NO;
        that.player.refresh = function() {
          that.player.refreshCalled = YES;
        };
        return that.player;
      }
    };

    this.timer = null;
    this.versusController.Timer = {
      schedule: function(params) {
        that.timer = {
          parameters: params,
	  invalidateCalled: NO,
          invalidate: function() {
	     this.invalidateCalled = YES;
	  }
        }
	return that.timer;
      }
    };
  },

  "Entering versus mode should force a login and start waiting for an opponent": function() {

    this.versusController.set('currentMode', 'versus')
    YES.shouldEqual(FilooFiloo.loginController.get('loginPaneVisible'));

    FilooFiloo.loginController.set('name', 'zinzin');
    FilooFiloo.loginController.closeLoginPane();

    'Waiting for an opponent ...'.shouldEqual(this.versusController.get('whatIsPlayerDoing'));
    assertNotNull(this.player);

    YES.shouldEqual(this.player.commitCalled);

    assertNotNull(this.timer);
    assertNotNull(this.timer.parameters);
    assertNotNull(this.timer.parameters.target);
    assertNotNull(this.timer.parameters.action);
    YES.shouldEqual(this.timer.parameters.repeats);

    NO.shouldEqual(this.player.refreshCalled);
    this.timer.parameters.target[this.timer.parameters.action]();
    YES.shouldEqual(this.player.refreshCalled);

    this.player.set('opponentName', 'gyzmo');
    this.timer.parameters.target[this.timer.parameters.action]();
    'Playing against gyzmo'.shouldEqual(this.versusController.get('whatIsPlayerDoing'));
    YES.shouldEqual(this.versusController.get('board').get('playing'));
  },

  "No login dialog should be shown when entering versus mode with a name": function() {
    FilooFiloo.loginController.set('name', 'zinzin');
    this.versusController.set('currentMode', 'versus')
    NO.shouldEqual(FilooFiloo.loginController.get('loginPaneVisible'));
  },
  "We should start waiting for an opponent even if a name was already set": function() {
    FilooFiloo.loginController.set('name', 'zinzin');
    this.versusController.set('currentMode', 'versus')
    'Waiting for an opponent ...'.shouldEqual(this.versusController.get('whatIsPlayerDoing'));
  },
  "We should only start waiting for an opponent in versus mode": function() {
    this.versusController.set('currentMode', 'high_scores')
    NO.shouldEqual(FilooFiloo.loginController.get('loginPaneVisible'));
    assertNotIdentical('Waiting for an opponent ...', this.versusController.get('whatIsPlayerDoing'));
  }

}) ;

// Cancel main() so app does not start
if (window.main && (appMain = main)) main = null ;

</script>

<% end %>
