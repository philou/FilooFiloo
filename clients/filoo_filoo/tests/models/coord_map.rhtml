<!-- Copyright (c) 2008-2009  Philippe Bourgau -->

<!-- This program is free software: you can redistribute it and/or modify -->
<!-- it under the terms of the GNU Affero General Public License as
 published by the Free Software Foundation, either version 3 of the
 License, or (at your option) any later version. -->

<!-- This program is distributed in the hope that it will be useful, but -->
<!-- WITHOUT ANY WARRANTY; without even the implied warranty of -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the -->
<!-- GNU Affero General Public License for more details. -->

<!-- You should have received a copy of the GNU Affero General Public License -->
<!-- program.  If not, see <http://www.gnu.org/licenses/> -->


<% # ========================================================================
   # FilooFiloo.CoordMap Unit Test
   # ========================================================================
%>
<% content_for('final') do %>

<script>

Test.context("FilooFiloo.CoordMap",{

    setup: function() {
        this.assertPieceContaining = function(fullMapRows, x, y, subPieceRows, message) {
            subPieceRows = subPieceRows || fullMapRows;
            var fullMap = FilooFiloo.TestsHelpers.newCoordMap(fullMapRows);
            var subPiece = fullMap.pieceContaining(x, y);
            var expectedSubPiece = FilooFiloo.TestsHelpers.newCoordMap(subPieceRows);

            this.assert(expectedSubPiece.equals(subPiece), message);
        };

        this.assertCreatePutEachEquals = function(mapRows) {
            var map = FilooFiloo.TestsHelpers.newCoordMap(mapRows);
            var copy = FilooFiloo.CoordMap.create();
            map.each(function(x,y,value) {
                copy.put(x,y,value);
            });

            this.assert(map.equals(copy));
        };

        this.removeEachShouldWork = function(startRows, removedRows, expectedRows) {
            var start = FilooFiloo.TestsHelpers.newCoordMap(startRows);
            var removed = FilooFiloo.TestsHelpers.newCoordMap(removedRows);
            var expected = FilooFiloo.TestsHelpers.newCoordMap(expectedRows);

            start.removeEach(removed);

            this.assert(expected.equals(start));
        };
            
    },

    "Stored values should be remembered": function() {
	var map = FilooFiloo.CoordMap.create();
	map.put(2, 4, "some value");
	map.put(3, 4, "something else");

	assertIdentical("some value", map.getAt(2, 4));
	assertIdentical("something else", map.getAt(3, 4));
    },

    "Absent values should be reported as null": function() {
	var map = FilooFiloo.CoordMap.create();
	map.put(2, 4, "something");
	assertNull(map.getAt(3, 4));
    },

    "Instances should not share state": function() {
	var map = FilooFiloo.CoordMap.create();
	var map2 = FilooFiloo.CoordMap.create();
	map.put(2, 4, "something");

	assertNull(map2.getAt(2,4));
    },

    "Count should be updated with additions": function() {
        var map = FilooFiloo.CoordMap.create();
        assertIdentical(0, map.get('count'));

        map.put(2, 3, "something");
        assertIdentical(1, map.get('count'));

        map.put(3, 1, "some other thing");
        assertIdentical(2, map.get('count'));

        map.put(2, 3, "something else");
        assertIdentical(2, map.get('count'));

        map.put(4, 5, null);
        assertIdentical(2, map.get('count'));
    },

    "GetAt should return null once the coord was removed": function() {
        var map = FilooFiloo.CoordMap.create();
        map.put(2, 3, "something");
	assertIdentical("something", map.getAt(2, 3));

        map.remove(2,3);
        assertNull(map.getAt(2,3));
    },

    "Remove should update the count": function() {
        var map = FilooFiloo.CoordMap.create();
        map.put(2, 3, "something");
	assertIdentical(1, map.get('count'));

        map.remove(2,3);
	assertIdentical(0, map.get('count'));
    },

    "Equals shouls work correctly": function() {
        assert(
            !FilooFiloo.TestsHelpers.newCoordMap(["r"]).equals(
                FilooFiloo.TestsHelpers.newCoordMap(["bb"])));

        assert(
            !FilooFiloo.TestsHelpers.newCoordMap(["rr"]).equals(
                FilooFiloo.TestsHelpers.newCoordMap(["bb"])));

        assert(
            !FilooFiloo.TestsHelpers.newCoordMap(["r r"]).equals(
                FilooFiloo.TestsHelpers.newCoordMap(["rrr"])));
    },

    "One colored maps should not be split": function() {
        assertPieceContaining(
            ["     ",
             "r    ",
             "rrr  "],
            0, 1);
    },

    "Multiple colors maps should be split according to the colors": function() {
        assertPieceContaining(
            ["  bbb",
             "rbbb ",
             "rrr  "],
            1, 1,
            ["  bbb",
             " bbb ",
             "     "]);
    },

    "Separated same coloured pieces should be split in many.": function() {
        assertPieceContaining(
            ["    r",
             "   rr",
             "rrr  "],
            4, 0,
            ["    r",
             "   rr",
             "     "]);
    },

    "Spliting in an empty region should return an empty map.": function() {
        assertPieceContaining(
            ["    r",
             "   rr",
             "rrr  "],
            0, 0,
            ["     ",
             "     ",
             "     "]);
    },

    "Copying a map copy through each put should be equal to the original": function() {
        assertCreatePutEachEquals(
            ["  bbb",
             "rbbb ",
             "rrr  "]);

        assertCreatePutEachEquals(
            ["    r",
             "   rr",
             "rrr  "]);
    },
    
    "Remove each should work": function() {
        removeEachShouldWork(
            ["gbbgr",
             "ppprr",
             "rrryy"],
            ["g   g",
             " g g ",
             "  g  "],
            [" bbg ",
             "p p r",
             "rr yy"]);
    }

}) ;


if (window.main && (appMain = main)) main = null ;

</script>

<% end %>
