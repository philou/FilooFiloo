<% # ========================================================================
   # PuyoPuyo.Board Unit Test
   # ========================================================================
%>
<% content_for('final') do %>

<script>

var idem = "no change";

Test.context("PuyoPuyo.Board",{

    setup: function() {
	PuyoPuyo.Board.setDimensions(4, 6);

	this.ticker = {
	    running: false,
	    start: function() {
		this.running = true;
	    },
	    stop: function() {
		this.running = false;
	    }
	};

	this.colorProvider = {
	    firstColor: PuyoPuyo.Game.Red,
	    secondColor: PuyoPuyo.Game.Blue,
	    popFirstColor: function() {
		return this.firstColor;
	    },
	    popSecondColor: function() {
		return this.secondColor;
	    }
	};

	this.board = PuyoPuyo.Board.create({ticker: this.ticker, colorProvider: this.colorProvider});

	this.assertBoard = function(stringRows, message) {
	    // TODO : factorize this with piece.rhtml tests
	    this.assertIdentical(PuyoPuyo.Board.RowCount, stringRows.length);

	    for(var r = 0; r < PuyoPuyo.Board.RowCount; ++r) {
		this.assertIdentical(PuyoPuyo.Board.ColCount, stringRows[r].length);

		for(var c = 0; c < PuyoPuyo.Board.ColCount; ++c) {
		    this.assertIdentical(PuyoPuyo.Game.initialToState[stringRows[r][c]],
					 this.board.cellState(c, r),
					 message + " at col=" + c + ", row=" + r);
		}
	    }
	};

	this.board.shouldBe = function(that, stringRows, message) {
	    that.assertBoard(stringRows, message);
	};

	this.board.shouldChangeWhen = function(that, actionName, message) {
	    var beforeBoardTime = this.get('time');
	    var result = this[actionName]();
	    var afterBoardTime = this.get('time');
	    that.assertNotIdentical(beforeBoardTime, afterBoardTime, message + " : board time not updated");
	    return result;
	};

	this.board.shouldNotChangeWhen = function(that, actionName, message) {
	    var beforeBoardTime = this.get('time');
	    var result = this[actionName]();
	    var afterBoardTime = this.get('time');
	    that.assertIdentical(beforeBoardTime, afterBoardTime, message + " : board time updated");
	    return result;
	};

	this.board.shouldChangeToWhen = function(that, actionName, stringRows, message) {
	    var result = this.shouldChangeWhen(that, actionName, message);
	    this.shouldBe(that, stringRows, message + " : board different");
	    return result;
	};

	/***
          Allows to specify test sequences from left to right instead of top to bottom.
        */
	this.board.shouldFollow = function(that, actionNames, allStringRows) {
	    var steps = [];
	    var count = actionNames.length;
	    for(var i = 0; i < count; ++i) {
		steps[i] = { actionName: actionNames[i],
			     message: "step "+i+" : "+actionNames[i],
			     stringRows: []};
	    }
	    that.assertIdentical(0, allStringRows.length % count);
	    for(var i = 0; i < allStringRows.length; ++i) {
		if (allStringRows[i] === idem) {
		    steps[i % count].stringRows = idem;
		}
		else {
		    steps[i % count].stringRows.push(allStringRows[i]);
		}
	    }
	    
	    var board = this;
	    for(var i = 0; i < steps.length; ++i) {
		if (steps[i].stringRows === idem) {
		    this.shouldNotChangeWhen(that, steps[i].actionName, steps[i].message);
		}
		else {
		    this.shouldChangeToWhen(that, steps[i].actionName, steps[i].stringRows, steps[i].message);
		}
	    }
	};

	var that = this;
	this.board.initBlockedPieces = function(stringRows) {
	    this.setBlockedPieces_(function() {
		var result = PuyoPuyo.CoordMap.create();

		that.assertIdentical(PuyoPuyo.Board.RowCount, stringRows.length);

		for(var r = 0; r < PuyoPuyo.Board.RowCount; ++r) {
		    that.assertIdentical(PuyoPuyo.Board.ColCount, stringRows[r].length);

		    for(var c = 0; c < PuyoPuyo.Board.ColCount; ++c) {
			result.put(c, r, PuyoPuyo.Game.initialToState[stringRows[r][c]]);
		    }
		}

		return result;
	    }());
	};
	    
    },

    teardown: function() {
	delete(this.board);
    },

    "The board's playing property should change with start and stop": function() {
	assertNotNull(board);
	false.shouldEqual(board.get('playing'));

	board.start();
	true.shouldEqual(board.get('playing'));

	board.abort();
	false.shouldEqual(board.get('playing'));
    },

    "The ticker should be started with the board": function() {
	false.shouldEqual(ticker.running);

	board.start();
	true.shouldEqual(ticker.running);

	board.abort();
	false.shouldEqual(ticker.running);
    },

    "The board should start empty": function() {
	board.shouldFollow(["start"],
			   ["    ",
			    "    ",
			    "    ",
			    "    ",
			    "    ",
			    "    "]);
    },

    "A piece should appear at first tick and move down at each tick.": function() {
	board.start();
	board.shouldFollow(["tick", "tick", "tick", "tick", "tick", "tick"],
			   [" rb ", "    ", "    ", "    ", "    ", "    ",
			    "    ", " rb ", "    ", "    ", "    ", "    ",
			    "    ", "    ", " rb ", "    ", "    ", "    ",
			    "    ", "    ", "    ", " rb ", "    ", "    ",
			    "    ", "    ", "    ", "    ", " rb ", "    ",
			    "    ", "    ", "    ", "    ", "    ", " rb "]);
    },

    "A new game should be started after an abort.": function() {
	board.start();
	board.tick();

	board.shouldFollow(["tick", "abort", "start"], 
			   ["    ",  idem,   "    ",
			    " rb ",  idem,   "    ",
			    "    ",  idem,   "    ",
			    "    ",  idem,   "    ",
			    "    ",  idem,   "    ",
			    "    ",  idem,   "    "]);
    },

    "New pieces should have colors from colorProvider.": function() {
	this.colorProvider.firstColor = PuyoPuyo.Game.Purple;
	this.colorProvider.secondColor = PuyoPuyo.Game.Yellow;

	board.start();
	board.shouldChangeToWhen("tick",
				 [" py ",
				  "    ",
				  "    ",
				  "    ",
				  "    ",
				  "    "]);
    },

    "A piece should move with left and right": function() {
	board.start();
	board.shouldFollow(["tick", "left", "right"],
			   [" rb ", "rb  ", " rb ", 
			    "    ", "    ", "    ",
			    "    ", "    ", "    ",
			    "    ", "    ", "    ",
			    "    ", "    ", "    ",
			    "    ", "    ", "    "]);
    },

    "A piece should rotate": function() {
	board.start();
	board.tick();
	board.shouldFollow(["tick", "rotate", "rotate", "rotate", "rotate"],
			   ["    ", " b  ",   "    ",   "    ",   "    ", 
			    " rb ", " r  ",   "br  ",   " r  ",   " rb ",
			    "    ", "    ",   "    ",   " b  ",   "    ",
			    "    ", "    ",   "    ",   "    ",   "    ",
			    "    ", "    ",   "    ",   "    ",   "    ",
			    "    ", "    ",   "    ",   "    ",   "    "]);
    },

    "A piece should anti rotate": function() {
	board.start();
	board.tick();
	board.shouldFollow(["tick", "antiRotate", "antiRotate", "antiRotate", "antiRotate"],
			   ["    ", "    ",       "    ",       " b  ",       "    ", 
			    " rb ", " r  ",       "br  ",       " r  ",       " rb ",
			    "    ", " b  ",       "    ",       "    ",       "    ",
			    "    ", "    ",       "    ",       "    ",       "    ",
			    "    ", "    ",       "    ",       "    ",       "    ",
			    "    ", "    ",       "    ",       "    ",       "    "]);
    },

    "It should not be possible to move a piece outside the board": function() {
	board.start();
	board.shouldFollow(["tick", "left", "left", "right", "right", "right",],
			   [" rb ", "rb  ", idem,   " rb ",  "  rb",  idem, 
			    "    ", "    ", idem,   "    ",  "    ",  idem,
			    "    ", "    ", idem,   "    ",  "    ",  idem,
			    "    ", "    ", idem,   "    ",  "    ",  idem,
			    "    ", "    ", idem,   "    ",  "    ",  idem,
			    "    ", "    ", idem,   "    ",  "    ",  idem]);
    },

    "A new piece should appear when the previous one gets blocked at the bottom of the board": function() {
	board.start();
	board.initCurrentPiece_({col: PuyoPuyo.Board.PieceStartOrigin.col, row:PuyoPuyo.Board.MaxRow});
	board.shouldBe(["    ",
			"    ",
			"    ",
			"    ",
			"    ",
			" rb "],
		      "initialy");

	board.shouldFollow(["tick", "tick"],
			   ["    ", " rb ",
			    "    ", "    ",
			    "    ", "    ",
			    "    ", "    ",
			    "    ", "    ",
			    " rb ", " rb "]);
    },

    "Blocked piece should pile on top of each other.": function() {
	board.start();
	board.initBlockedPieces(["    ",
				 "    ",
				 "    ",
				 "    ",
				 "    ",
				 " yp "]);
	board.initCurrentPiece_({col: PuyoPuyo.Board.PieceStartOrigin.col, row:PuyoPuyo.Board.MaxRow - 2});
	board.shouldBe(["    ",
			"    ",
			"    ",
			" rb ",
			"    ",
			" yp "],
		      "initialy");

	board.shouldFollow(["tick", "tick"],
			   ["    ", "    ",
			    "    ", "    ",
			    "    ", "    ",
			    "    ", "    ",
			    " rb ", " rb ",
			    " yp ", " yp "]);
    },

    "Puyos of vertical pieces should be blocked on top of each other.": function() {
	board.start();
	board.initCurrentPiece_({col: PuyoPuyo.Board.PieceStartOrigin.col, row:PuyoPuyo.Board.MaxRow - 1});
	board.antiRotate();
	board.shouldBe(["    ",
			"    ",
			"    ",
			"    ",
			" r  ",
			" b  "],
		      "initialy");

	board.shouldFollow(["tick"],
			   ["    ",
			    "    ",
			    "    ",
			    "    ",
			    " r  ",
			    " b  "]);
    },

    "Blocked beans should follow the law of gravity": function() {
	board.start();
	board.initBlockedPieces(["    ",
				 "    ",
				 "    ",
				 "    ",
				 "    ",
				 "yp  "]);
	board.initCurrentPiece_({col: PuyoPuyo.Board.PieceStartOrigin.col, row:PuyoPuyo.Board.MaxRow - 1});
	board.shouldBe(["    ",
			"    ",
			"    ",
			"    ",
			" rb ",
			"yp  "],
		      "initialy");

	board.shouldFollow(["tick"],
			   ["    ",
			    "    ",
			    "    ",
			    "    ",
			    " r  ",
			    "ypb "]);
    }

/*
    "A piece should be droped with space bar": function() {
	fail("not yet implemented");
    }

    "When grouped by 4 or more, beans of the same color should disappear": function() {
	fail("not yet implemented");
    }

    "Disappearing beans should cascade": function() {
	fail("not yet implemented");
    }

    "Game should be lost when there is no place for new pieces": function() {
        fail("not yet implemented");
    }
*/
}) ;

if (window.main && (appMain = main)) main = null ;

</script>

<% end %>
