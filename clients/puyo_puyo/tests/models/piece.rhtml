<% # ========================================================================
   # PuyoPuyo.Piece Unit Test
   # ========================================================================
%>
<% content_for('final') do %>

<script>

Test.context("PuyoPuyo.Piece",{

    setup: function() {
	this.assertPiece = function(stringRows, piece) {
            PuyoPuyo.TestsHelpers.assertStringRows(this, stringRows, 5, 5, function(c,r) {
                return piece.cellState(piece.get('center').col + c - 2, piece.get('center').row + r - 2);
            }, "");
	};

	this.piece = PuyoPuyo.Piece.create(
	    {center: {row: 3,
		      col: 2},
	     colors: {first: PuyoPuyo.Game.Red,
		      second: PuyoPuyo.Game.Blue}});
    },

    "A new piece should contain its origin and the cell at its right": function() {
	assertPiece(["     ",
		     "     ",
		     "  rb ",
		     "     ",
		     "     "],
		    this.piece);
    },

    "The piece should change when rotated.": function() {
	var piece = this.piece.rotate();
	assertPiece(["     ",
		     "  b  ",
		     "  r  ",
		     "     ",
		     "     "],
		    piece);
	piece = piece.rotate();
	assertPiece(["     ",
		     "     ",
		     " br  ",
		     "     ",
		     "     "],
		    piece);
	piece = piece.rotate();
	assertPiece(["     ",
		     "     ",
		     "  r  ",
		     "  b  ",
		     "     "],
		    piece);
	piece = piece.rotate();
	assertPiece(["     ",
		     "     ",
		     "  rb ",
		     "     ",
		     "     "],
		    piece);
    },

    "The piece should change when anti rotated.": function() {
	var piece = this.piece.antiRotate();
	assertPiece(["     ",
		     "     ",
		     "  r  ",
		     "  b  ",
		     "     "],
		    piece);
	piece = piece.antiRotate();
	assertPiece(["     ",
		     "     ",
		     " br  ",
		     "     ",
		     "     "],
		    piece);
	piece = piece.antiRotate();
	assertPiece(["     ",
		     "  b  ",
		     "  r  ",
		     "     ",
		     "     "],
		    piece);
	piece = piece.antiRotate();
	assertPiece(["     ",
		     "     ",
		     "  rb ",
		     "     ",
		     "     "],
		    piece);
    },

    "forEach should enumerate both cells": function() {
	var expected =
	    [{row:3, col:2, color:PuyoPuyo.Game.Red},
	     {row:3, col:3, color:PuyoPuyo.Game.Blue}];
	var i = 0;
	var that = this;
	this.piece.forEach(function(row, col, color) {
	    that.assertIdentical(expected[i].row, row);
	    that.assertIdentical(expected[i].col, col);
	    that.assertIdentical(expected[i].color, color);
	    i++;
	});
	this.assertIdentical(expected.length, i);
    },

    "forEach should enumerate cells from bottom to top": function() {
	var that = this;
	["Down", "Up"].each( function(orientation) {
	    that.piece.orientation = orientation;
	    var previousRow = PuyoPuyo.Board.MaxRow + 1;
	    that.piece.forEach(function(row, col, color) {
		that.assert(row < previousRow);
		previousRow = row;
	    });
	});
    }

}) ;

if (window.main && (appMain = main)) main = null ;

</script>

<% end %>
